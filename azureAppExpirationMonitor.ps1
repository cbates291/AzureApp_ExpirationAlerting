#Purpose: Grab all Azure Applications, build out the info for the app including the secret(s) and their expiration dates.
#       We can then alert based on those expiration dates accordingly.

# Connect to Azure how you see fit
Connect-Azaccount


#Connect to MS Graph as you see fit.
Connect-MgGraph

#Grab all App registrations
$allApps = Get-MgApplication -All
#Grab all Legacy Enterprise Applications. do not want to pull workflows as those seem to be generated by MS on the backend.
$legacyApps = Get-MgServicePrincipal -All |?{$_.serviceprincipaltype -match "legacy"} |?{$_.displayname -notcontains "workflow"}

$currentDate = Get-Date
$allSecretInfo = @()
$allcertificateInfo = @()
$allExpiredSecrets = @()
$30DaySecrets = @()

#Global Email Variables:
$SMTPServer = "SMTPSERVER"
$From = "EMAIL@EMAIL.COM"
$bcc = "BCC@BCC.COM"

foreach ($app in $allApps){
    $ownerName = @()
    $ownerEmail = @()
    $ownerId = ""
    #Get Secrets for the app
    $secrets = $app.PasswordCredentials
    #Check for any Certificates that the app may be using
    $certificates = $app.KeyCredentials
    #Get the Owner(s) info of the app
    $ownerId = Get-MgApplicationOwner -ApplicationId $app.Id
    #Gather Owner Info - This is used to email the owner of the upcoming expiration  
    foreach($owner in $ownerId){
            $ownerName += Get-MgUser -UserId $owner.id |select displayname
            $ownerEmail += Get-MgUser -UserId $owner.id | select Mail
    }
    $ownerName = $ownerName.DisplayName -join ","
    $ownerEmail = $ownerEmail.Mail -join ","
    #Process secret and info and compile into array
    foreach ($secret in $secrets){
        $secretInfo = [PSCustomObject]@{  # Write out details of the private channel and its members
            AppName        = $app.DisplayName
            AppId          = $app.Id
            SecretName     = $secret.DisplayName
            SecretExpiration = $secret.EndDateTime
            Owner          = $ownerName
            OwnerEmail     = $ownerEmail
            LegacyApp      = "False"
        }
        $allSecretInfo += $secretInfo
    }
    #Process certificates and gather info into array
    if($certificates){
        foreach ($certificate in $certificates){
            $certificateInfo = [PSCustomObject]@{  # Write out details of the private channel and its members
                AppName        = $app.DisplayName
                AppId          = $app.Id
                CertificateName     = $certificate.DisplayName
                CertificateExpiration = $certificate.EndDateTime
                Owner          = $ownerName
                OwnerEmail     = $ownerEmail
                LegacyApp      = "False"
            }
            $allcertificateInfo += $certificateInfo
        }
    }else {
        #no certificates to process
    }
}
#Process Legacy App information
foreach ($app in $legacyApps){
    $ownerName = @()
    $ownerEmail = @()
    $ownerId = ""
    #Get Secrets for the app
    $secrets = $app.PasswordCredentials
    #Check for any Certificates that the app may be using
    $certificates = $app.KeyCredentials
    #Get the Owner(s) info of the app
    $ownerId = Get-MgServicePrincipalOwner -ServicePrincipalId $app.Id
    #Gather Owner Info - This is used to email the owner of the upcoming expiration  
    foreach($owner in $ownerId){
            $ownerName += Get-MgUser -UserId $owner.id |select displayname
            $ownerEmail += Get-MgUser -UserId $owner.id | select Mail
    }
    $ownerName = $ownerName.DisplayName -join ","
    $ownerEmail = $ownerEmail.Mail -join ","
    #Process secret and info and compile into array
    foreach ($secret in $secrets){
        $secretInfo = [PSCustomObject]@{  # Write out details of the private channel and its members
            AppName        = $app.DisplayName
            AppId          = $app.Id
            SecretName     = $secret.DisplayName
            SecretExpiration = $secret.EndDateTime
            SecretKeyId    = $secret.KeyId
            Owner          = $ownerName
            OwnerEmail     = $ownerEmail
            LegacyApp      = "True"
        }
        $allSecretInfo += $secretInfo
    }
    #Process certificates and gather info into array
    if($certificates){
        foreach ($certificate in $certificates){
            $certificateInfo = [PSCustomObject]@{  # Write out details of the private channel and its members
                AppName        = $app.DisplayName
                AppId          = $app.Id
                CertificateName     = $certificate.DisplayName
                CertificateExpiration = $certificate.EndDateTime
                CertificateKeyId    = $certificate.KeyId
                Owner          = $ownerName
                OwnerEmail     = $ownerEmail
                LegacyApp      = "True"
            }
            $allcertificateInfo += $certificateInfo
        }
    }else {
        #no certificates to process
    }
}
#Gather Secrets that are expired or will expire within 30 days
foreach ($secret in $allSecretInfo){
    $appname = $secret.AppName
    $expiration = $secret.SecretExpiration
    $toEmail = $secret.OwnerEmail
    $toEmail = $toEmail.Split(",")

    if ($currentDate -gt $secret.SecretExpiration){ #This means the expiration has already passed
        $expiredSubject = "Azure App Secret HAS EXPIRED"
        $expiredBody = "Azure Application $appname had a secret key expire on $expiration."
        $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $expiredSubject;
            "Body" = $expiredBody;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }elseif($currentDate -gt $secret.SecretExpiration.addDays(-30)){ #This means the expiration is 30 days or less
        $upcoming30Subject = "Azure App Secret Expiring within 30 days"
        $upcoming30Body = "Azure Application $appname has a secret key expiring on $expiration."
        $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $upcoming30Subject;
            "Body" = $upcoming30Body;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }elseif($currentDate -gt $secret.SecretExpiration.addDays(-14)){ #This means the expiration is 14 days or less
        $upcoming14Subject = "Azure App Secret Expiring within 14 days"
        $upcoming14Body = "Azure Application $appname has a secret key expiring on $expiration."
        $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $upcoming14Subject;
            "Body" = $upcoming14Body;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }elseif($currentDate -gt $secret.SecretExpiration.addDays(-7)){ #This means the expiration is 7 days or less
        $upcoming7Subject = "Azure App Secret Expiring within 7 days"
        $upcoming7Body = "Azure Application $appname has a secret key expiring on $expiration."
        $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $upcoming7Subject;
            "Body" = $upcoming7Body;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }else{ #Not Expired and Not expiring soon. No action needed

    }
}
#Gather Certificates that are expired or will expire within 30 days
foreach ($certificate in $allcertificateInfo){
    $appname = $certificate.AppName
    $expiration = $certificate.CertificateExpiration
    $toEmail = $secret.OwnerEmail
    $toEmail = $toEmail.Split(",")

    if ($currentDate -gt $certificate.CertificateExpiration){ #This means the expiration has already passed
        $expiredSubject = "Azure App Certificate HAS EXPIRED"
        $expiredBody = "Azure Application $appname had a Certificate expire on $expiration."
                $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $expiredSubject;
            "Body" = $expiredBody;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }elseif($currentDate -gt $certificate.CertificateExpiration.addDays(-30)){ #This means the expiration is 30 days or less
        $upcoming30Subject = "Azure App Certificate Expiring within 30 days"
        $upcoming30Body = "Azure Application $appname has a Certificate expiring on $expiration."
        $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $upcoming30Subject;
            "Body" = $upcoming30Body;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }elseif($currentDate -gt $certificate.CertificateExpiration.addDays(-14)){ #This means the expiration is 14 days or less
        $upcoming14Subject = "Azure App Certificate Expiring within 14 days"
        $upcoming14Body = "Azure Application $appname has a Certificate expiring on $expiration."
        $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $upcoming14Subject;
            "Body" = $upcoming14Body;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }elseif($currentDate -gt $certificate.CertificateExpiration.addDays(-7)){ #This means the expiration is 7 days or less
        $upcoming7Subject = "Azure App Certificate Expiring within 7 days"
        $upcoming7Body = "Azure Application $appname has a Certificate expiring on $expiration."
                $Params = @{
            "To" = $toEmail;
            "From" = $From;
            "Subject" = $upcoming7Subject;
            "Body" = $upcoming7Body;
            "Bcc" = $bcc
        }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait
    }else{ #Not Expired and Not expiring soon. No action needed

    }
}

if($error.Count -gt 0)
	{
            $Params = @{
        "To" = @("EMAIL@EMAIL.COM");
        "From" = $From;
        "Subject" = "Azure Application Secret/Certificate Expiration script Error";
        "Body" = "AzureApplicationSecretExpiration: $error";
    }
        # Use Another runbook for sending email.
        Start-AzAutomationRunbook -AutomationAccountName "ACCOUNTNAME"  -Name "NAMEOFRUNBOOK" -ResourceGroupName "RESOURCEGROUPNAME" -Parameters $Params -Wait

	}
